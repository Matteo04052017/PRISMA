#!/usr/bin/env python
# -*- coding:utf-8 -*-


# ############################################################################
#  license :
# ============================================================================
#
#  File :        Prisma_EventCapture.py
#
#  Project :     
#
# This file is part of Tango device class.
# 
# Tango is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# Tango is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with Tango.  If not, see <http://www.gnu.org/licenses/>.
# 
#
#  $Author :      cisimo.volpicelli$
#
#  $Revision :    $
#
#  $Date :        $
#
#  $HeadUrl :     $
# ============================================================================
#            This file is generated by POGO
#     (Program Obviously used to Generate tango Object)
# ############################################################################

__all__ = ["Prisma_EventCapture", "Prisma_EventCaptureClass", "main"]

__docformat__ = 'restructuredtext'

import PyTango
import sys
# Add additional import
#----- PROTECTED REGION ID(Prisma_EventCapture.additionnal_import) ENABLED START -----#
import os,datetime,re
#----- PROTECTED REGION END -----#	//	Prisma_EventCapture.additionnal_import

# Device States Description
# No states for this device


class Prisma_EventCapture (PyTango.Device_4Impl):
    """"""
    
    # -------- Add you global variables here --------------------------
    #----- PROTECTED REGION ID(Prisma_EventCapture.global_variables) ENABLED START -----#
    
    #----- PROTECTED REGION END -----#	//	Prisma_EventCapture.global_variables

    def __init__(self, cl, name):
        PyTango.Device_4Impl.__init__(self,cl,name)
        self.debug_stream("In __init__()")
        Prisma_EventCapture.init_device(self)
        #----- PROTECTED REGION ID(Prisma_EventCapture.__init__) ENABLED START -----#
        
        #----- PROTECTED REGION END -----#	//	Prisma_EventCapture.__init__
        
    def delete_device(self):
        self.debug_stream("In delete_device()")
        #----- PROTECTED REGION ID(Prisma_EventCapture.delete_device) ENABLED START -----#
        
        #----- PROTECTED REGION END -----#	//	Prisma_EventCapture.delete_device

    def init_device(self):
        self.debug_stream("In init_device()")
        self.get_device_properties(self.get_device_class())
        self.attr_NewEvent_read = ""
        self.set_change_event("NewEvent", True, True)
        #----- PROTECTED REGION ID(Prisma_EventCapture.init_device) ENABLED START -----#
        db = PyTango.Database()
        dict = db.get_device_property(self.get_name(), "data_path")
        devents_analyzed = db.get_device_property(self.get_name(), "events_analyzed")
        self.events_analyzed = devents_analyzed['events_analyzed'][0]
        self.data_path = dict["data_path"][0]
        print(self.data_path)
        print(self.events_analyzed)
        #----- PROTECTED REGION END -----#	//	Prisma_EventCapture.init_device

    def always_executed_hook(self):
        self.debug_stream("In always_excuted_hook()")
        #----- PROTECTED REGION ID(Prisma_EventCapture.always_executed_hook) ENABLED START -----#
        
        #----- PROTECTED REGION END -----#	//	Prisma_EventCapture.always_executed_hook

    # -------------------------------------------------------------------------
    #    Prisma_EventCapture read/write attribute methods
    # -------------------------------------------------------------------------
    
    def read_NewEvent(self, attr):
        self.debug_stream("In read_NewEvent()")
        #----- PROTECTED REGION ID(Prisma_EventCapture.NewEvent_read) ENABLED START -----#
        attr.set_value(self.attr_NewEvent_read)
        
        #----- PROTECTED REGION END -----#	//	Prisma_EventCapture.NewEvent_read
        
    
    
            
    def read_attr_hardware(self, data):
        self.debug_stream("In read_attr_hardware()")
        #----- PROTECTED REGION ID(Prisma_EventCapture.read_attr_hardware) ENABLED START -----#
        
        #----- PROTECTED REGION END -----#	//	Prisma_EventCapture.read_attr_hardware


    # -------------------------------------------------------------------------
    #    Prisma_EventCapture command methods
    # -------------------------------------------------------------------------
    
    def EventDetect(self):
        """ 
        """
        self.debug_stream("In EventDetect()")
        #----- PROTECTED REGION ID(Prisma_EventCapture.EventDetect) ENABLED START -----#
        def getLastFile(p):
            files = []
            allfiles = os.listdir(p)
            # sorted(os.listdir('/prismadata/it01001_20180726/captures') , key = lambda x: getLastFile(x,'/prismadata/it01001_20180726/captures/'))
            now = datetime.datetime.now()
            nowMeno10 = now - datetime.timedelta(minutes=10)
            #print("NOW", now)
            #print("NOW - 10", nowMeno10)
            for fl in allfiles:

                dt_format = "%Y%m%dT%H%M%S"
                date = re.match('it01001_(\S+)', fl).group(1).split('_')
                dateo = datetime.datetime.strptime(date[0], dt_format)
                #              print("DATEO",dateo)
                #              print("NOWMENO10",nowMeno10)
                if dateo > nowMeno10:
                    files.append(fl)
                    print(fl)
                #else:
                    # print("SKIPPA")
                #    pass
            return files
        #----- PROTECTED REGION END -----#	//	Prisma_EventCapture.EventDetect
        

    #----- PROTECTED REGION ID(Prisma_EventCapture.programmer_methods) ENABLED START -----#
        myhost = os.uname()[1]
        today = datetime.date.today()
        # print(myhost+'_'+ today.strftime('%Y%m%d'))
        dirpath = '/' + myhost + '_' + today.strftime('%Y%m%d') + '/events/'
        #path = self.data_path + dirpath
        eventsdir = self.data_path + dirpath
        file_events_analyzed= eventsdir+self.events_analyzed
        print(eventsdir)
        if os.path.exists(file_events_analyzed):
            print("ESISTE")
            #getLastFiles(capturepath)
            allfiles = os.listdir(eventsdir)
            fileevan = open(file_events_analyzed, 'r')
            allFileEvAn = fileevan.read().split('\n')
            #print(allFileEvAn)
            for fl in allfiles:
                dt_format = "%Y%m%dT%H%M%S"
		print("FILE ",fl)
                if re.match('it01001_', fl):
                #.group(1)#.split('_')
                    print("DIR",fl)
                    if not fl in allFileEvAn:
                        print("Da Analizzare",fl)
                        self.attr_NewEvent_read = fl
                        self.push_change_event("NewEvent", fl)
                else:
                    print("NO PUSH")
        else:
            print("NON ESISTE")
            f = open(file_events_analyzed, 'a+')
            f.write('# Fiel Events already analyzed')
            f.close()


            #----- PROTECTED REGION END -----#	//	Prisma_EventCapture.programmer_methods

class Prisma_EventCaptureClass(PyTango.DeviceClass):
    # -------- Add you global class variables here --------------------------
    #----- PROTECTED REGION ID(Prisma_EventCapture.global_class_variables) ENABLED START -----#
    
    #----- PROTECTED REGION END -----#	//	Prisma_EventCapture.global_class_variables


    #    Class Properties
    class_property_list = {
        }


    #    Device Properties
    device_property_list = {
        'data_path':
            [PyTango.DevString, 
             '',
            ["/prismadata"] ],
        'events_analyzed':
            [PyTango.DevString, 
            "File contains all the events dir already copird to the server",
            [] ],
        }

    #    Command definitions
    cmd_list = {
        'EventDetect':
            [[PyTango.DevVoid, "none"],
            [PyTango.DevVoid, "none"],
            {
                'Polling period': "3000",
            } ],
        }


    #    Attribute definitions
    attr_list = {
        'NewEvent':
            [[PyTango.DevString,
            PyTango.SCALAR,
            PyTango.READ]],
        }


def main():
    try:
        py = PyTango.Util(sys.argv)
        py.add_class(Prisma_EventCaptureClass, Prisma_EventCapture, 'Prisma_EventCapture')
        #----- PROTECTED REGION ID(Prisma_EventCapture.add_classes) ENABLED START -----#
        
        #----- PROTECTED REGION END -----#	//	Prisma_EventCapture.add_classes

        U = PyTango.Util.instance()
        U.server_init()
        U.server_run()

    except PyTango.DevFailed as e:
        print ('-------> Received a DevFailed exception:', e)
    except Exception as e:
        print ('-------> An unforeseen exception occured....', e)

if __name__ == '__main__':
    main()
