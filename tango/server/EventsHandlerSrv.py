#!/usr/bin/env python
# -*- coding:utf-8 -*-


# ############################################################################
#  license :
# ============================================================================
#
#  File :        EventsHandlerSrv.py
#
#  Project :     EventsHandlersSrv
#
# This file is part of Tango device class.
# 
# Tango is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# Tango is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with Tango.  If not, see <http://www.gnu.org/licenses/>.
# 
#
#  $Author :      cosimo.volpicelli$
#
#  $Revision :    $
#
#  $Date :        $
#
#  $HeadUrl :     $
# ============================================================================
#            This file is generated by POGO
#     (Program Obviously used to Generate tango Object)
# ############################################################################

__all__ = ["EventsHandlerSrv", "EventsHandlerSrvClass", "main"]

__docformat__ = 'restructuredtext'

import PyTango
import sys
# Add additional import
#----- PROTECTED REGION ID(EventsHandlerSrv.additionnal_import) ENABLED START -----#
#----- PROTECTED REGION END -----#	//	EventsHandlerSrv.additionnal_import

# Device States Description
# No states for this device


class EventsHandlerSrv (PyTango.Device_4Impl):
    """Server per la gestione degli eventi"""
    
    # -------- Add you global variables here --------------------------
    #----- PROTECTED REGION ID(EventsHandlerSrv.global_variables) ENABLED START -----#
    eventoID=0    
    #----- PROTECTED REGION END -----#	//	EventsHandlerSrv.global_variables

    def __init__(self, cl, name):
        PyTango.Device_4Impl.__init__(self,cl,name)
        self.debug_stream("In __init__()")
        EventsHandlerSrv.init_device(self)
        #----- PROTECTED REGION ID(EventsHandlerSrv.__init__) ENABLED START -----#
        
        #----- PROTECTED REGION END -----#	//	EventsHandlerSrv.__init__
        
    def delete_device(self):
        self.debug_stream("In delete_device()")
        #----- PROTECTED REGION ID(EventsHandlerSrv.delete_device) ENABLED START -----#
        
        #----- PROTECTED REGION END -----#	//	EventsHandlerSrv.delete_device

    def init_device(self):
        self.debug_stream("In init_device()")
        self.get_device_properties(self.get_device_class()) 
        #----- PROTECTED REGION ID(EventsHandlerSrv.init_device) ENABLED START -----#
        db = PyTango.Database()
        class_name = 'EventStation'
        list_of_devs = ['/'.join((class_name,name)) for name in db.get_instance_name_list(class_name)]
        listOfDev = []
        for mydev in list_of_devs:
              tmp = db.get_device_class_list(mydev)
              listOfDev.append(tmp[2])
        print("TEST",listOfDev)
        for device in listOfDev:

            try:
                print("SOTTOSCRIVI")
                self.dev = PyTango.DeviceProxy(device)
                eventoID = self.dev.subscribe_event("NewDirectory", PyTango.EventType.CHANGE_EVENT, self.HandlePushedEvent,stateless=True)#
                #eventoID = self.dev.subscribe_event("NewDirectory", PyTango.EventType.CHANGE_EVENT, self.HandlePushedEvent) #,[],True)#,stateless=
                print(" Sottoscritto a ",device,eventoID)
            except Exception  :
                print("str(e)")
        #----- PROTECTED REGION END -----#	//	EventsHandlerSrv.init_device

    def always_executed_hook(self):
        self.debug_stream("In always_excuted_hook()")
        #----- PROTECTED REGION ID(EventsHandlerSrv.always_executed_hook) ENABLED START -----#
        
        #----- PROTECTED REGION END -----#	//	EventsHandlerSrv.always_executed_hook

    # -------------------------------------------------------------------------
    #    EventsHandlerSrv read/write attribute methods
    # -------------------------------------------------------------------------
    
    
    
            
    def read_attr_hardware(self, data):
        self.debug_stream("In read_attr_hardware()")
        #----- PROTECTED REGION ID(EventsHandlerSrv.read_attr_hardware) ENABLED START -----#
        
        #----- PROTECTED REGION END -----#	//	EventsHandlerSrv.read_attr_hardware


    # -------------------------------------------------------------------------
    #    EventsHandlerSrv command methods
    # -------------------------------------------------------------------------
    
    def Start(self):
        """ 
        """
        self.debug_stream("In Start()")
        #----- PROTECTED REGION ID(EventsHandlerSrv.Start) ENABLED START -----#
        
        #----- PROTECTED REGION END -----#	//	EventsHandlerSrv.Start
        
    def Stop(self):
        """ 
        """
        self.debug_stream("In Stop()")
        #----- PROTECTED REGION ID(EventsHandlerSrv.Stop) ENABLED START -----#
        
        #----- PROTECTED REGION END -----#	//	EventsHandlerSrv.Stop
        
    def ResetEvents(self, argin):
        """ 
        :param argin: 
        :type argin: PyTango.DevLong
        """
        self.debug_stream("In ResetEvents()")
        #----- PROTECTED REGION ID(EventsHandlerSrv.ResetEvents) ENABLED START -----#
        
        #----- PROTECTED REGION END -----#	//	EventsHandlerSrv.ResetEvents
        
    def HandlePushedEvent(self, argin):
        """ 
        :param argin: 
        :type argin: PyTango.DevString
        """
        self.debug_stream("In HandlePushedEvent()")
        #----- PROTECTED REGION ID(EventsHandlerSrv.HandlePushedEvent) ENABLED START -----#
        
        #----- PROTECTED REGION END -----#	//	EventsHandlerSrv.HandlePushedEvent
        

    #----- PROTECTED REGION ID(EventsHandlerSrv.programmer_methods) ENABLED START -----#
        #print(argin)
        if argin.attr_value is not None:
             if argin.attr_value.value is not None:
                   print(" Events sent from ",argin.device, " value = ",argin.attr_value.value,"\n") #.value)    
        #self.dev.unsubscribe_event(self.eventoID)
        #self.init_device()

    #----- PROTECTED REGION END -----#	//	EventsHandlerSrv.programmer_methods

class EventsHandlerSrvClass(PyTango.DeviceClass):
    # -------- Add you global class variables here --------------------------
    #----- PROTECTED REGION ID(EventsHandlerSrv.global_class_variables) ENABLED START -----#
    
    #----- PROTECTED REGION END -----#	//	EventsHandlerSrv.global_class_variables


    #    Class Properties
    class_property_list = {
        'Prova':
            [PyTango.DevString, 
            "Esempio di Prova",
            [] ],
        }


    #    Device Properties
    device_property_list = {
        'numberOfEvents':
            [PyTango.DevShort, 
            "Numero degli eventi",
            [] ],
        'data_path':
            [PyTango.DevVarStringArray, 
            "Path Array dei dati degli eventi nei singoli nodi",
            [] ],
        'ListOfNodes':
            [PyTango.DevVarStringArray, 
            "Lista dei Nodi coinvolti",
            [] ],
        'ListOfDateTime':
            [PyTango.DevVarStringArray, 
            "Lista dell`ora in cui e` stato registrato l`evento sul singolo nodo",
            [] ],
        }


    #    Command definitions
    cmd_list = {
        'Start':
            [[PyTango.DevVoid, "none"],
            [PyTango.DevVoid, "none"]],
        'Stop':
            [[PyTango.DevVoid, "none"],
            [PyTango.DevVoid, "none"]],
        'ResetEvents':
            [[PyTango.DevLong, "none"],
            [PyTango.DevVoid, "none"]],
        'HandlePushedEvent':
            [[PyTango.DevString, "none"],
            [PyTango.DevVoid, "none"]],
        }


    #    Attribute definitions
    attr_list = {
        }


def main():
    try:
        py = PyTango.Util(sys.argv)
        py.add_class(EventsHandlerSrvClass, EventsHandlerSrv, 'EventsHandlerSrv')
        #----- PROTECTED REGION ID(EventsHandlerSrv.add_classes) ENABLED START -----#
        
        #----- PROTECTED REGION END -----#	//	EventsHandlerSrv.add_classes

        U = PyTango.Util.instance()
        U.server_init()
        U.server_run()

    except PyTango.DevFailed as e:
        print ('-------> Received a DevFailed exception:', e)
    except Exception as e:
        print ('-------> An unforeseen exception occured....', e)

if __name__ == '__main__':
    main()
